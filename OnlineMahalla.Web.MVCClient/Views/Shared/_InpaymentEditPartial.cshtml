@using Microsoft.AspNetCore.Mvc.Localization
@inject IHtmlLocalizer<SharedResource> SharedLocalizer
@using OnlineMahalla.Common.Utility;

@{
    ViewData["Title"] = "Create";
    DateTime StartDate = DateTimeUtility.FirstDayOfMonth(DateTime.Today.AddMonths(-1));
    DateTime EndDate = DateTime.Today.AddDays(5);
}
<link rel="stylesheet" href="~/css/my.css" />

<environment names="Development">
    <link rel="stylesheet" href="~/lib/bootstrap-table/dist/bootstrap-table.css" />
    <link rel="stylesheet" href="~/lib/bootstrap-select/dist/css/bootstrap-select.css" />
    <link rel="stylesheet" href="~/lib/bootstrap-datepicker/dist/css/bootstrap-datepicker.css" />
    <link rel="stylesheet" href="~/css/site.css" />
</environment>
<environment names="Staging,Production">
    <link rel="stylesheet" href="~/lib/bootstrap-table/dist/bootstrap-table.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap-select/dist/css/bootstrap-select.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap-datepicker/dist/css/bootstrap-datepicker.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />
</environment>

<div class="panel panel-primary"></div>
<div id="forbancdocument" class="panel panel-default">
    <div class="panel-heading">
        <h2 class="panel-title" style="text-align:center"><b>@SharedLocalizer["Inpayment"]</b></h2>
    </div>
    <div class="form-horizontal">
        <br>
        <div class="form-group">
            <form class="form-inline">
                <label class="col-md-3 control-label" style="font-size:13px;text-align:right">@SharedLocalizer["ID(TreasID)"]</label>
                <div class="col-sm-2">
                    <input class="form-control input-sm" type="number" style="width:100px" data-bind="value:inpayment.TreasDocID,valueUpdate:'afterkeydown',enable:canchange">
                    <button align="center" type="button" data-bind='click: fillRows,enable:canchange' class="btn btn-info btn-sm"><span>@SharedLocalizer["Import"]</span></button>
                </div>
            </form>
            <label class="col-md-1 control-label" style="font-size:13px;text-align:right">@SharedLocalizer["Number"]</label>
            <div class="col-md-1">
                <input placeholder="@SharedLocalizer["Number"]" data-bind="value:inpayment.Number,valueUpdate:'afterkeydown',enable:canchange" class="form-control input-sm" />
            </div>
            <label class="col-md-1 col-xs-1 control-label" required style="font-size:13px;text-align:right">@SharedLocalizer["Date"]</label>
            <div class="col-md-1 col-xs-4">
                <input placeholder="@SharedLocalizer["Date"]" data-bind="value:inpayment.Date,valueUpdate:'afterkeydown',event:{ change: $root.currencycoursechange},enable:canchange" required class="form-control input-sm" data-provide="datepicker" data-date-format="dd.mm.yyyy" data-date-autoclose="true" data-date-language="ru" />
            </div>
            <label class="col-md-1 col-xs-1 control-label" required style="font-size:13px;text-align:right">@SharedLocalizer["PaymentOrderID"]</label>
            <div class="col-md-1 col-xs-4">
                <input disabled placeholder="@SharedLocalizer["PaymentOrderID"]" data-bind="value:inpayment.PaymentOrderID,valueUpdate:'afterkeydown'" class="form-control input-sm" />
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-3 control-label" required style="font-size:13px">@SharedLocalizer["AllowedTransaction"]</label>
            <div class="col-sm-6">
                <select data-bind='options: allowedtransactionlist, optionsText: "Name",optionsValue:"ID", optionsCaption: "@SharedLocalizer["PleaseSelectOne"]", value:inpayment.AllowedTransactionID,selectPicker: {},event:{ change: allowedtransactionchange},enable:canchange' data-live-search="true" class="" data-width="100%"> </select>
            </div>            
        </div>
        <div class="form-group">
            <label class="col-md-3 control-label" required style="font-size:13px">@SharedLocalizer["SubAccDb"]</label>
            <div class="col-sm-1">
                <select disabled data-bind='options: subaccdblist, optionsText: "Code",optionsValue:"ID", optionsCaption: "@SharedLocalizer["PleaseSelectOne"]", value:inpayment.SubAccDbID,selectPicker: {}' data-live-search="true" class="" data-width="100%"> </select>
            </div>
            <label class="col-md-2 control-label" required style="font-size:13px">@SharedLocalizer["SubAccCr"]</label>
            <div class="col-md-1">
                <select data-bind='options: subacccrlist, optionsText: "Code",optionsValue:"ID", optionsCaption: "@SharedLocalizer["PleaseSelectOne"]", value:inpayment.SubAccCrID,selectPicker: {},event:{ change: $root.selectedsubacccrchange}' data-live-search="true" class="" data-width="100%"> </select>
            </div>
            <label class="col-md-1 control-label" style="font-size:13px;text-align:right">@SharedLocalizer["Sum"]</label>
            @*<div class="col-md-1">
                    <input placeholder="@SharedLocalizer["Sum"]" data-bind="value:inpayment.Sum,valueUpdate:'afterkeydown'" maxlength="5" class="form-control input-sm" />
                </div>*@
            <div class="col-sm-1">
                <span data-bind="text: formatrussiannumber(inpayment.Sum())"></span>
            </div>
        </div>
        <!-- ko if: (subaccdbiscurrency() || subacccriscurrency()) -->
        <div class="form-group">
            <div>
                <label class="col-md-3 control-label" required style="font-size:13px">@SharedLocalizer["Currency"]</label>
                <div class="col-sm-2">
                    <select data-bind='options: currencylist, optionsText: "Name",optionsValue:"ID", optionsCaption: "@SharedLocalizer["PleaseSelectOne"]", value:inpayment.CurrencyID,selectPicker: {}, event:{ change: coursechange},enable:canchange' data-live-search="true" class="" data-width="100%"> </select>
                </div>
                <label class="col-md-1 col-xs-6 control-label" style="font-size:13px;text-align:right">@SharedLocalizer["Course"]:</label>
                <div class="col-sm-1">
                    <span data-bind='text: formatrussiannumber(lastcurrencycourse())'></span>
                </div>
                <label class="col-md-1 col-xs-6 control-label" style="font-size:13px;text-align:right">@SharedLocalizer["CurrencySum"]</label>
                <div class="col-sm-1">
                    <span data-bind="text: formatrussiannumber(inpayment.CurrencySum())"></span>
                </div>
            </div>
        </div>
        <!-- /ko -->
        <div class="form-group">
            <form class="form-inline">
                <label class="col-md-3 control-label" style="font-size:13px;text-align:right">@SharedLocalizer["PayerName"]</label>
                <div class="col-sm-6">
                    <input disabled class="form-control input-sm" data-bind="value:inpayment.PayerName,valueUpdate:'afterkeydown',enable:canchange" style="width:94%">
                    <button type="button" id="btnselectcon" data-bind='enable:canchange' class="btn btn-primary btn-sm"><span class="glyphicon glyphicon-search"></span></button>
                </div>
            </form>
        </div>
        <div class="form-group">
            <div class="col-md-2"></div>
            <div id="myDIV">
                <!-- ko if: (inpayment.OrganizationState()===1 && inpayment.OrganizationIsFullBudget()===true && inpayment.OrganizationsSettlementAccountOutOfBalance()===false && !(inpayment.OrganizationAccountCode().substring(0,4)==="4004" || inpayment.OrganizationAccountCode().substring(0,3)==="200" || inpayment.OrganizationAccountCode().substring(0,3)==="300") && inpayment.OrganizationAccountCode().length !== 20)-->
                <form class="form-inline">
                    <label class="col-md-1 control-label" style="font-size:13px">@SharedLocalizer["RequestReceivingCash"]</label>
                    <div class="col-sm-3">
                        <input class="form-control input-sm" disabled data-bind="value:inpayment.RequestReceivingCashID" style="width:56%">
                        <button type="button" id="btnselectreq" class="btn btn-primary btn-sm"><span class="glyphicon glyphicon-search"></span></button>
                    </div>
                </form>
                <!-- /ko -->
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-3 control-label" style="font-size:13px">@SharedLocalizer["TrOrganizationAccount"]</label>
            <div class="col-sm-2">
                <input disabled data-bind="value:inpayment.OrganizationAccountCode,valueUpdate:'afterkeydown'" required class="form-control input-sm" />
            </div>
            <label class="col-md-2 control-label" required style="font-size:13px">@SharedLocalizer["MoneyMeansMovement"]</label>
            <div class="col-sm-2">
                <select data-bind='options: moneymeansmovementlist, optionsText: "Name",optionsValue:"ID", optionsCaption: "@SharedLocalizer["PleaseSelectOne"]", value:inpayment.MoneyMeansMovementID,selectPicker: {}' data-live-search="true" class="" data-width="100%"> </select>
            </div>
        </div>
        <div class="form-group">
            <label class="col-md-3 control-label" style="font-size:13px">@SharedLocalizer["PaymentDetails"]: <span id="result"></span></label>
            <div class="col-md-6">
                <textarea type="text" id="detal" placeholder="@SharedLocalizer["PaymentDetails"]" data-bind="value:inpayment.PaymentDetails,valueUpdate:'afterkeydown',enable:canchange" required class="form-control input-sm" @*onpaste="return false"*@ style="max-width:inherit" rows="3" maxlength="450"></textarea>
            </div>
        </div>

        <div class="container">
            <div class="panel panel-default">
                <table id="Table" class="table table-striped table-bordered table-condensed" align="center">
                    <thead style="background-color:aquamarine">
                        <tr>
                            <td>
                                <!-- ko if: !(transubcountinfo.CrSubCountInfo.SubCount1ID()===0) -->
                                <div class="form-inline" align="center">
                                    <div class="form-group">
                                        <input disabled data-bind="value:addsubcountname1,valueUpdate:'afterkeydown'" class="form-control input-sm" />
                                    </div>
                                    <button type="button" data-bind="click:selectsubcount1" id="btnselectsubcount1" class="btn btn-primary btn-sm"><span class="glyphicon glyphicon-search"></span></button>
                                </div>
                                <!-- /ko -->
                            </td>
                            <td>
                                <!-- ko if: !(transubcountinfo.CrSubCountInfo.SubCount2ID()===0) -->
                                <div class="form-inline" align="center">
                                    <div class="form-group">
                                        <input disabled data-bind="value:addsubcountname2,valueUpdate:'afterkeydown'" class="form-control input-sm" />
                                    </div>
                                    <button type="button" data-bind="click:selectsubcount2" id="btnselectsubcount2" class="btn btn-primary btn-sm"><span class="glyphicon glyphicon-search"></span></button>
                                </div>
                                <!-- /ko -->
                            </td>
                            <td>
                                <!-- ko if: !(transubcountinfo.CrSubCountInfo.SubCount3ID()===0) -->
                                <div class="form-inline" align="center">
                                    <div class="form-group">
                                        <input disabled data-bind="value:addsubcountname3,valueUpdate:'afterkeydown'" class="form-control input-sm" />
                                    </div>
                                    <button type="button" data-bind="click:selectsubcount3" id="btnselectsubcount3" class="btn btn-primary btn-sm"><span class="glyphicon glyphicon-search"></span></button>
                                </div>
                                <!-- /ko -->
                            </td>
                            <td>
                                <select data-width="300" data-bind='options: $root.itemofexpenselist, optionsText: "Code",optionsValue:"ID", optionsCaption: "@SharedLocalizer["PleaseSelectOne"]", value: additemofexpensesid,selectPicker: {}' data-live-search="true" data-size="7"> </select>
                            </td>
                            <td><input data-bind="value:addsum,valueUpdate:'afterkeydown'" type="number" class="form-control input-sm " /></td>
                            <td></td>
                            <td style="text-align:center;width:50px">
                                <button type="button" data-bind='click: addRow,enable:canchange2' class="btn btn-primary btn-sm"><span class="glyphicon glyphicon-plus"></span></button>
                            </td>
                        </tr>
                    </thead>
                    <thead>
                        <tr>
                            <th style="text-align:center;width:300px">
                                <!-- ko if: !(transubcountinfo.CrSubCountInfo.SubCount1ID()===0) -->
                                <span data-bind='text:transubcountinfo.CrSubCountInfo.SubCount1Name()'></span>
                                <!-- /ko -->
                            </th>
                            <th style="text-align:center;width:300px">
                                <!-- ko if: !(transubcountinfo.CrSubCountInfo.SubCount2ID()===0) -->
                                <span data-bind='text:transubcountinfo.CrSubCountInfo.SubCount2Name()'></span>
                                <!-- /ko -->
                            </th>
                            <th style="text-align:center;width:300px">
                                <!-- ko if: !(transubcountinfo.CrSubCountInfo.SubCount3ID()===0) -->
                                <span data-bind='text:transubcountinfo.CrSubCountInfo.SubCount3Name()'></span>
                                <!-- /ko -->
                            </th>
                            <th style="text-align:center;width:200px">@SharedLocalizer["ItemOfExpensesCode"]</th>
                            <th style="text-align:center;width:200px">@SharedLocalizer["Sum"]</th>
                            <th style="text-align:center;width:200px">@SharedLocalizer["CurrencySum"]</th>
                            <th style="text-align:center;width:60px"><span class="label label-primary"></span></th>
                        </tr>
                    </thead>
                    <tbody data-bind="foreach:inpayment.Tables">
                        <!-- ko if: !(Status()===3) -->
                        <tr>
                            <td>
                                <span data-bind='text:SubCountCr1Name'></span>
                            </td>
                            <td>
                                <span data-bind='text:SubCountCr2Name'></span>
                            </td>
                            <td>
                                <span data-bind='text:SubCountCr3Name'></span>
                            </td>
                            <td style="width:200px">
                                <!-- ko if: (Status()===1||Status()===2) -->
                                <select disabled data-bind='options: $root.itemofexpenselist, optionsText: "Code",optionsValue:"ID", optionsCaption: "@SharedLocalizer["PleaseSelectOne"]", value:ItemOfExpensesID,selectPicker: {}' data-live-search="true" data-width="262px" data-size="5"> </select>
                                <!-- /ko -->
                                <!-- ko if: (Status()===0) -->
                                <span data-bind='text:ItemOfExpensesCode'></span>
                                <!-- /ko -->
                            </td>
                            <td align="center">
                                <!-- ko if: ((Status()===1||Status()===2) && TableIsCurrency()===false) -->
                                <input data-bind="commaDecFor:Sum,valueUpdate:'afterkeydown',event:{ change: $root.selectedrowdatachange}" class="form-control input-sm" type="text" style="max-width:inherit;text-align:center" />
                                <!-- /ko -->
                                <!-- ko if: (Status()===0 || TableIsCurrency()===true) -->
                                <b><span data-bind='russionNumber:Sum'></span></b>
                                <!-- /ko -->
                            </td>
                            <td align="center">
                                <!-- ko if: ((Status()===1||Status()===2) && TableIsCurrency()===true) -->
                                <input data-bind="commaDecFor:CurrencySum,valueUpdate:'afterkeydown',event:{ change: $root.selectedrowdatachange}" class="text-center form-control input-sm" type="text" style="max-width:inherit" />
                                <!-- /ko -->
                                <!-- ko if: (Status()===0 || TableIsCurrency()===false) -->
                                <b><span data-bind='russionNumber:CurrencySum'></span></b>
                                <!-- /ko -->
                            </td>
                            <td align="center">
                                <span type="button" data-bind='click: $root.editRow' class="btn btn-default btn-xs" data-toggle="popover" data-trigger="hover"><i class="glyphicon glyphicon-edit"> </i></span>
                                <span type="button" data-bind='click: $root.removeRow' class="btn btn-danger btn-xs" data-toggle="popover" data-trigger="hover"><i class="glyphicon glyphicon-trash"> </i></span>
                            </td>
                        </tr>
                        <!-- /ko -->
                    </tbody>
                </table>
            </div>
            <div class="form-group" align="center">
                <button type="button" data-bind="click:checkdata,enable:canchange2" class="btn btn-primary btn-sm"> @SharedLocalizer["Check"]</button>
                <button type="button" data-bind="click:savedata,enable:canchange2" class="btn btn-primary btn-sm"> @SharedLocalizer["Save"]</button>
                <a asp-controller="Inpayment" asp-action="Index" asp-route-OrganizationsSettlementAccountID="@ViewBag.OrganizationsSettlementAccountID" asp-route-Startdate="@ViewBag.Startdate" asp-route-Enddate="@ViewBag.Enddate" asp-route-StartSum="@ViewBag.StartSum" asp-route-EndSum="@ViewBag.EndSum" asp-route-Status="@ViewBag.Status" asp-route-Number="@ViewBag.Number" asp-route-TreasDocID="@ViewBag.TreasDocID" asp-route-PaymentDetails="@ViewBag.PaymentDetails" class="btn btn-sm">@SharedLocalizer["Back to List"]</a>
            </div>
        </div>


    </div>
</div>

<!-- Modal Select SubCount -->
<div id="subcountselectWindow" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">@SharedLocalizer["SubCountSelect"]</h4>
            </div>
            <div class="form-group form-inline" align="center">
                @*<div class="input-group">
                        <input id="filtercode" style="font-size:11px" class="form-control input-sm" placeholder="@SharedLocalizer["Code"]" />
                    </div>*@
                <div class="input-group">
                    <input id="filtername" style="font-size:12px" class="form-control input-sm" placeholder="@SharedLocalizer["Names"]" />
                </div>
                <div class="input-group">
                    <button id="refreshdata" class="btn btn-primary btn-sm" data-toggle="popover" data-content="@SharedLocalizer["Search"]" data-trigger="hover"><span class="glyphicon glyphicon-search"></span></button>
                </div>
            </div>
            <p></p>
            <div class="modal-body">
                <div class="container">
                    <table id="tableSubCountSelect"
                           data-search="false"
                           data-show-refresh="false"
                           data-show-toggle="false"
                           data-show-columns="false"
                           data-show-export="true"
                           data-pagination="true"
                           data-page-list="[50,100,150,200]"
                           data-detail-view="false"
                           data-minimum-count-columns="2"
                           data-show-pagination-switch="false"
                           data-side-pagination="server"
                           data-id-field="ID">
                        <thead>
                            <tr>
                                <th data-field="ID" data-sortable="true">ID</th>
                                <th data-field="Name" data-sortable="true">@SharedLocalizer["Names"]</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btnsubcountselect" n type="button" class="btn btn-primary">@SharedLocalizer["Select"]</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">@SharedLocalizer["Close"]</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Select CON -->
<div id="conselectWindow" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">@SharedLocalizer["PleaseSelectContractor"]</h4>
            </div>
            <div class="form-group form-inline" align="center">
                <div class="input-group">
                    <input id="filternamecon" style="font-size:12px" class="form-control input-sm" placeholder="@SharedLocalizer["Names"]" />
                </div>
                <div class="input-group">
                    <button id="refreshdata2" class="btn btn-primary btn-sm" data-toggle="popover" data-content="@SharedLocalizer["Search"]" data-trigger="hover"><span class="glyphicon glyphicon-search"></span></button>
                </div>
            </div>
            <p></p>
            <div class="modal-body">
                <div class="container">
                    <table id="tableCONSelect"
                           data-search="false"
                           data-show-refresh="false"
                           data-show-toggle="false"
                           data-show-columns="false"
                           data-show-export="true"
                           data-pagination="true"
                           data-page-list="[50,100,150,200]"
                           data-detail-view="false"
                           data-minimum-count-columns="2"
                           data-show-pagination-switch="false"
                           data-side-pagination="server"
                           data-query-params="queryParams2"
                           data-id-field="ID">
                        <thead>
                            <tr>
                                <th data-field="ID" data-sortable="true">ID</th>
                                <th data-field="Name" data-sortable="true">@SharedLocalizer["Names"]</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btnconselect" n type="button" class="btn btn-primary">@SharedLocalizer["Select"]</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">@SharedLocalizer["Close"]</button>
            </div>
        </div>
    </div>
</div>

<!-- Modal Select REQUEST -->
<div id="reqselectWindow" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 align="center" class="modal-title">@SharedLocalizer["RequestReceivingCash"]</h4>
            </div>
            <div class="form-group form-inline" align="center">
                <div class="input-group">
                    <input type="number" id="filternamereq" style="font-size:12px" class="form-control input-sm" placeholder="@SharedLocalizer["ID"]" />
                </div>
                <div class="input-group">
                    <button id="refreshdata3" class="btn btn-primary btn-sm" data-toggle="popover" data-content="@SharedLocalizer["Search"]" data-trigger="hover"><span class="glyphicon glyphicon-search"></span></button>
                </div>
            </div>
            <p></p>
            <div class="modal-body">
                <div class="container">
                    <table id="tableREQSelect"
                           data-search="false"
                           data-show-refresh="false"
                           data-show-toggle="false"
                           data-show-columns="false"
                           data-show-export="true"
                           data-pagination="true"
                           data-page-list="[50,100,150,200]"
                           data-detail-view="false"
                           data-minimum-count-columns="2"
                           data-show-pagination-switch="false"
                           data-side-pagination="server"
                           data-query-params="queryParams3"
                           data-id-field="ID">
                        <thead>
                            <tr>
                                <th data-field="ID" data-sortable="true">ID</th>
                                <th data-field="Name" data-sortable="true">@SharedLocalizer["Names"]</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <div class="modal-footer">
                <button id="btnreqselect" n type="button" class="btn btn-primary">@SharedLocalizer["Select"]</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">@SharedLocalizer["Close"]</button>
            </div>
        </div>
    </div>
</div>

@section scripts
    {
    <environment names="Development">
        <script src="~/lib/bootstrap-table/dist/bootstrap-table.js"></script>
        <script src="~/lib/bootstrap-table/dist/locale/bootstrap-table-ru-RU.js"></script>
        <script src="~/lib/bootstrap-select/dist/js/bootstrap-select.js"></script>
        <script src="~/lib/knockout/dist/knockout.debug.js"></script>
        <script src="~/lib/knockout-mapping/knockout.mapping.js"></script>
        <script src="~/lib/bootstrap-datepicker/dist/js/bootstrap-datepicker.js"></script>
        <script src="~/lib/bootstrap-datepicker/dist/locales/bootstrap-datepicker.ru.min.js"></script>
        <script src="~/js/ko.utility.js"></script>
        <script src="~/js/utility.js"></script>
    </environment>
    <environment names="Staging,Production">
        <script src="~/lib/bootstrap-table/dist/bootstrap-table.min.js"></script>
        <script src="~/lib/bootstrap-table/dist/locale/bootstrap-table-ru-RU.min.js"></script>
        <script src="~/lib/bootstrap-select/dist/js/bootstrap-select.min.js"></script>
        <script src="~/lib/knockout/dist/knockout.js"></script>
        <script src="~/lib/knockout-mapping/knockout.mapping.js"></script>
        <script src="~/lib/bootstrap-datepicker/dist/js/bootstrap-datepicker.min.js"></script>
        <script src="~/lib/bootstrap-datepicker/dist/locales/bootstrap-datepicker.ru.min.js"></script>
        <script src="~/js/ko.utility.js"></script>
        <script src="~/js/utility.js"></script>
    </environment>

    <script type="text/javascript">

        function queryParams2(params) {
            params.name = $('#filternamecon').val();
            return params;
        }
        function queryParams3(params) {
            params.ID = $('#filternamereq').val();
            return params;
        }

        var ItemModel = function () {
            var self = this;
            self.inpayment = {};
            self.transubcountinfo = {};
            self.addsubcountnumber = ko.observable(0);
            self.addsubcountid1 = ko.observable(0);
            self.addsubcountid2 = ko.observable(0);
            self.addsubcountid3 = ko.observable(0);
            self.total = ko.observable(0);
            self.addsubcountname1 = ko.observable('');
            self.addsubcountname2 = ko.observable('');
            self.addsubcountname3 = ko.observable('');
            self.additemofexpensesid = ko.observable(0);  //2
            self.addcurrencysum = ko.observable(0);
            self.addsum = ko.observable(0);
            self.currencylist = ko.mapping.fromJS([]);
            self.lastcurrencycourse = ko.observable(0);
            self.canchange = ko.observable(true);
            self.canchange2 = ko.observable(true);
            self.canchangefill = ko.observable(true);
            self.showrequest = ko.observable(false);
            self.creditaccid = ko.observable(0);
            self.mmmkindid = ko.observable(0);
            self.isfill = ko.observable(false);
            self.subacccriscurrency = ko.observable(false);
            self.subaccdbiscurrency = ko.observable(false);

            self.addRow = function () {
                var currentsubcount1ID = self.addsubcountid1();
                var currentsubcount1Name = self.addsubcountname1();
                var currentsubcount2ID = self.addsubcountid2();
                var currentsubcount2Name = self.addsubcountname2();
                var currentsubcount3ID = self.addsubcountid3();
                var currentsubcount3Name = self.addsubcountname3();
                if (self.inpayment.AllowedTransactionID() === null || self.inpayment.AllowedTransactionID() === undefined || self.inpayment.AllowedTransactionID() === 0) {
                    alert("@SharedLocalizer["AllowedTransactionNotSelected"]");
                    return false;
                }
                if (self.inpayment.SubAccCrID() === null || self.inpayment.SubAccCrID() === undefined || self.inpayment.SubAccCrID() === 0) {
                    alert("@SharedLocalizer["SubAccCrNotSelected"]");
                    return false;
                }
                if (self.inpayment.PayerName() === null || self.inpayment.PayerName() === undefined || self.inpayment.PayerName() === '' || self.inpayment.PayerName() === 0) {
                    alert("@SharedLocalizer["PayerNotSelected"]");
                    return false;
                }
                if (self.inpayment.MoneyMeansMovementID() === null || self.inpayment.MoneyMeansMovementID() === undefined || self.inpayment.MoneyMeansMovementID() === 0) {
                    alert("@SharedLocalizer["MoneyMeansMovementNotSelected"]");
                    return false;
                }
                if (self.inpayment.PaymentDetails() === null || self.inpayment.PaymentDetails() === "" || self.inpayment.PaymentDetails() === undefined || self.inpayment.PaymentDetails() === '' || self.inpayment.PaymentDetails() === 0) {
                    alert("@SharedLocalizer["PaymentDetailsNotSelected"]");
                    return false;
                }
                if (!self.additemofexpensesid()) {
                    alert("@SharedLocalizer["ItemOfExpensesNotCorrect"]");
                    return;
                }
                if (!self.addsum()) {
                    alert("@SharedLocalizer["SumNotCorrect"]");
                    return false;
                }
                if ((currentsubcount1ID === undefined && self.transubcountinfo.CrSubCountInfo.SubCount1ID() > 0) || (currentsubcount1ID === 0 && self.transubcountinfo.CrSubCountInfo.SubCount1ID() > 0)) {
			        alert("@SharedLocalizer["SubCountCr1Value"]" + ' ' + self.transubcountinfo.CrSubCountInfo.SubCount1Name() + ' ' + "@SharedLocalizer["NotChoosen"]");
			        return;
                }
                if ((currentsubcount2ID === undefined && self.transubcountinfo.CrSubCountInfo.SubCount2ID() > 0) || (currentsubcount2ID === 0 && self.transubcountinfo.CrSubCountInfo.SubCount2ID() > 0) || (currentsubcount2ID === null && self.transubcountinfo.CrSubCountInfo.SubCount2ID() > 0) || (currentsubcount2ID === "0" && self.transubcountinfo.CrSubCountInfo.SubCount2ID() > 0) || (currentsubcount2ID === '0' && self.transubcountinfo.CrSubCountInfo.SubCount2ID() > 0)) {
                    alert("@SharedLocalizer["SubCountCr2Value"]" + ' ' + self.transubcountinfo.CrSubCountInfo.SubCount2Name() + ' ' + "@SharedLocalizer["NotChoosen"]");
			        return;
                }
                if ((currentsubcount3ID === undefined && self.transubcountinfo.CrSubCountInfo.SubCount3ID() > 0) || (currentsubcount3ID === 0 && self.transubcountinfo.CrSubCountInfo.SubCount3ID() > 0)) {
			        alert("@SharedLocalizer["SubCountCr3Value"]" + ' ' + self.transubcountinfo.CrSubCountInfo.SubCount3Name() + ' ' + "@SharedLocalizer["NotChoosen"]");
			        return;
                }
                if (self.inpayment.CurrencyID() < 0 || self.inpayment.CurrencyID() === undefined) {
			        alert("@SharedLocalizer["CurrencyNotCorrect"]");
			        return;
                }
                var currrrr = false;
                if (self.subaccdbiscurrency() || self.subacccriscurrency()) {
                    currrrr = true;
                }
                self.inpayment.Tables.push({
                    ID: ko.observable(0),
                    SubCountCr1OriginalID: currentsubcount1ID,
                    SubCountCr1Name: currentsubcount1Name,
                    SubCountCr2OriginalID: currentsubcount2ID,
                    SubCountCr2Name: currentsubcount2Name,
                    SubCountCr3OriginalID: currentsubcount3ID,
                    SubCountCr3Name: currentsubcount3Name,
                    ItemOfExpensesID: self.additemofexpensesid(),
                    CurrencySum: ko.observable(0),
                    Sum: ko.observable(self.addsum()),
                    Status: ko.observable(1),
                    TableIsCurrency: ko.observable(currrrr),
                });
                //self.addsubcountid1(0);
                //self.addsubcountid2(0);
                //self.addsubcountid3(0);
                self.addsubcountname1('');
                self.addsubcountname2('');
                self.addsubcountname3('');
                self.additemofexpensesid(''); //1
                //self.addcurrencysum(0);
                self.addsum(0);
                self.calculatetotal();
            };
            self.fillRows = function () {
                self.isfill(true);
                self.canchangefill(false);

                getajaxjson("@Url.Action("GetInpaymentFromTreas", "Inpayment")" + "/?TreasDocID=" + self.inpayment.TreasDocID() + "&OrganizationsSettlementAccountID=" + self.inpayment.OrganizationsSettlementAccountID(), function (data) {

                    if (data === null)
                        alert("Поступления не найден.")
                    else if (data.Number === -1) {
                        alert("Поступление уже добавлено.");
                    }
                    else {
                        self.inpayment.Number(data.Number);
                        self.inpayment.Date(data.Date);
                        self.inpayment.PayerName(data.PayerName);
                        self.inpayment.PaymentDetails(data.PaymentDetails);
                        self.inpayment.MoneyMeansMovementID(data.MoneyMeansMovementID);
                        self.addsubcountname1(data.SubCount1Name);
                        self.addsubcountid1(data.SubCount1ID);
                        self.inpayment.Sum(data.Sum);
                        if ((self.inpayment.OrganizationAccountCode().substring(0, 4) === "4005" || self.inpayment.OrganizationAccountCode().substring(0, 4) === "4008") && (self.inpayment.SubCount1ID === 0 || self.inpayment.SubCount1ID === undefined)) {
                            alert("Тўлов мақсадида боланинг шахсий ҳисоб коди (мисол учун 001-000236876) кўрсатилган бўлганда, тушумни импорт қилиш пайтида унинг Ф.И.Ш.и ҳам автомат танланган бўларди. Боланинг шахсий ҳисоб кодини банклар томонидан тўловни ўтказиш чоғида кўрсатиб кетилишини назоратга олишингизни, ота-оналарга бу бўйича маълумот бериб боришингизни ва квитанция формасини уларга ҳар ой тарқатишингизни сўраймиз.\r\nЕсли бы в деталях платежа был бы указан личный код ребёнка (например 001-000236876), то во время импортирования поступления его Ф.И.О. выбралось бы автоматически. Просим вас проследить за тем, чтобы во время проведения платежа банком, они указывали личный код ребёнка, также просим вас распространить данную информацию родителям и каждый месяц раздавать им квитанции.");
                        }
                        if (self.inpayment.OrganizationAccountCode().substring(0, 4) === "4009" && self.inpayment.SubCount1ID === 0) {
                            alert("Тўлов мақсадида талабанинг шахсий ҳисоб коди (мисол учун 002-000236876) кўрсатилган бўлганда, тушумни импорт қилиш пайтида унинг Ф.И.Ш.и ҳам автомат танланган бўларди. Талабанинг шахсий ҳисоб кодини банклар томонидан тўловни ўтказиш чоғида кўрсатиб кетилишини назоратга олишингизни, тўловчиларга бу бўйича маълумот бериб боришингизни сўраймиз.\r\nЕсли бы в деталях платежа был бы указан личный код студента (например 002-000236876), то во время импортирования поступления его Ф.И.О. выбралось бы автоматически. Просим вас проследить за тем, чтобы во время проведения платежа банком, они указывали личный код студента, также просим вас распространить данную информацию плательщикам.");
                        }
                    }
                    if (data.SumInWords == "") {
                        self.additemofexpensesid(254);
                    }
                    else {
                        //console.log(data.SumInWords.split(";", 1));
                        //console.log(data.SumInWords.split(";", 1).toString().substring(1,8));
                        //console.log(typeof (data.SumInWords.split(";", 1).toString()));
                        //console.log(data.SumInWords.split(";", 2));
                        ko.utils.arrayForEach(self.itemofexpenselist(), function (item) {
                            if (item.Name() === data.SumInWords.split(";", 1).toString().substring(1, 8)) {
                                self.additemofexpensesid(item.ID());
                            }
                        });
                    }
                });
                self.contractorchange();
                if (!self.isfill()) {
                    self.allowedtransactionchange();
                }
                //self.allowedtransactionchange();
                self.selectedsubacccrchange();
                self.coursechange();
                self.calculatetotal();
                self.addsum(self.inpayment.Sum());
            };
            self.selectedrowdatachange = function (changerow) {
                if (self.inpayment.CurrencyID() > 0) {
                    var Q1 = parseFloat(changerow.CurrencySum() * Number(self.lastcurrencycourse()));
                    changerow.Sum(Q1);
                    //self.inpayment.Sum(Q1);
                }
                //changerow.Sum(Q1);
                self.calculatetotal();
            };
            self.selectedsubacccrchange = function () {
                ko.utils.arrayForEach(self.subacccrlist(), function (item) {
                    if (item.ID() === self.inpayment.SubAccCrID()) {
                        self.creditaccid(item.AccID());
                        return;
                    }
                });
                self.hidd();
            };
            self.selectedmoneymeansmovementchange = function () {
                ko.utils.arrayForEach(self.moneymeansmovementlist(), function (item) {
                    if (item.ID() === self.inpayment.MoneyMeansMovementID()) {
                        self.mmmkindid(item.MoneyMeansMovementsKindID());
                        return;
                    }
                });
                ko.utils.arrayForEach(self.subacccrlist(), function (item) {
                    if (item.ID() === self.inpayment.SubAccCrID()) {
                        self.subacccriscurrency(item.IsCurrency());
                        return;
                    }
                });
                ko.utils.arrayForEach(self.subaccdblist(), function (item) {
                    if (item.ID() === self.inpayment.SubAccDbID()) {
                        self.subaccdbiscurrency(item.IsCurrency());
                        return;
                    }
                });
                self.hidd();
            };
            self.hidd = function () {
                if (self.mmmkindid() === 1 && self.creditaccid() !== 45 && self.showrequest() === true)
                    document.getElementById("myDIV").hidden = false;
                else document.getElementById("myDIV").hidden = true;
            };
            self.formatrussiannumber = function (value) {
                var number = value;
                return new Intl.NumberFormat('ru-RU', {
                    maximumFractionDigits: 2,
                    minimumFractionDigits: 2
                }).format(number);
            };
            self.calculatetotal = function () {
                self.total(0);
                var totalsum = 0;
                var totalcur = 0;
                var count = 0;
                ko.utils.arrayForEach(self.inpayment.Tables(), function (item) {
                    if (item.Status() !== 3) {
                        totalsum = totalsum + parseFloat(item.Sum());
                        totalcur = totalcur + parseFloat(item.CurrencySum());
                        count = count + 1;
                    }
                });
                if (count > 0) {
                    self.canchange(false);
                }
                else {
                    self.canchange(true);
                }
                self.inpayment.CurrencySum(totalcur);
                if (!self.isfill() && (self.subaccdbiscurrency() || self.subacccriscurrency()))
                {
                    self.inpayment.Sum(round(totalcur, 2));
                }
                if (!self.isfill() && !(self.subaccdbiscurrency() || self.subacccriscurrency())) {
                    self.inpayment.Sum(round(totalsum, 2));
                }

                if (self.inpayment.StatusID() === 2) {
                    self.canchange2(false);
                }
            };
            self.removeRow = function (row) {
                if (row.Status() === 1) {
                    self.inpayment.Tables.remove(row);
                    self.calculatetotal();
                    return;
                }
                row.Status(3);
                self.calculatetotal();
            };
            self.editRow = function (row) {
                if (row.Status() === 0) {
                    row.Status(2);
                }
            };

            self.currencycoursechange = function () {
                self.coursechange();
            };

            

            self.allowedtransactionchange = function () {                
                self.addsubcountname1('');
		        self.addsubcountname2('');
                self.addsubcountname3('');
                //self.addsum(0);
                //self.addsubcountid1(0);
		        //self.addsubcountid2(0);
                //self.addsubcountid3(0);
                self.additemofexpensesid(0); //3

                getajaxjson("@Url.Action("GetTransactionSubCountInfo", "Helper")" + "/?AllowedTransactionID=" + self.inpayment.AllowedTransactionID(), function (data) {
                    ko.mapping.fromJS(data, {}, self.transubcountinfo);
                    if (data.CrSubCountInfo.SubCount2ID === 11) {
                        self.showrequest(false);
                    }
                    else {
                        self.showrequest(true);
                    }
                    self.hidd();
                });

                getajaxjson("@Url.Action("GetInpaymentSubAccDBList", "Helper")" + "/?OrganizationsSettlementAccountID=" + self.inpayment.OrganizationsSettlementAccountID(), function (data) {
                        ko.mapping.fromJS(data, self.subaccdblist);
                });

                getajaxjson("@Url.Action("GetInpaymentSubAccCRList", "Helper")" + "/?AllowedTransactionID=" + self.inpayment.AllowedTransactionID(), function (data) {
                    ko.mapping.fromJS(data, self.subacccrlist);
                });
            };

            self.contractorchange = function (item) {
                getajaxjson("@Url.Action("GetContractorAccountList", "Helper")", function (data) {
                        ko.mapping.fromJS(data, self.contractoraccountlist);
                });
            };
            self.coursechange = function () {
                getajaxjson("@Url.Action("GetLastCurrencyCourse", "Helper")" + "/?CurrencyID=" + self.inpayment.CurrencyID() + "&Date=" + self.inpayment.Date(),
			        function (data) {
                        self.lastcurrencycourse(data);
                    });
                self.calculatetotal();
            };

            self.contractoraccountlist = ko.mapping.fromJS([]);
            self.moneymeansmovementlist = ko.mapping.fromJS([]);
            self.subaccdblist = ko.mapping.fromJS([]);
            self.subacccrlist = ko.mapping.fromJS([]);
            self.allowedtransactionlist = ko.mapping.fromJS([]);
            self.itemofexpenselist = ko.mapping.fromJS([]);

            self.selectsubcount1 = function () {
                $('#tableSubCountSelect').bootstrapTable('destroy')
                self.addsubcountnumber(1);
                $('#tableSubCountSelect').bootstrapTable('resetSearch');
                $('#tableSubCountSelect').bootstrapTable('removeAll');
                var link = "@Url.Action("AAA", "CCC")";
                link = link.replace("AAA", self.transubcountinfo.CrSubCountInfo.SubCount1Action());
                link = link.replace("CCC", self.transubcountinfo.CrSubCountInfo.SubCount1Controller());
                $('#tableSubCountSelect').bootstrapTable('refresh', { url: link });
                $('#tableSubCountSelect').bootstrapTable('destroy').bootstrapTable({
                    url: link,
                    queryParams: function (params) {
                        params.name = $('#filtername').val();
                        return params;
                    }
                });
                $('#filtername').val('');
                $("#subcountselectWindow").modal('show');
                self.addsubcountname2(null);
		        self.addsubcountid1(null);
		        self.addsubcountname3(null);
                self.addsubcountid2(null);
            };
            self.selectsubcount2 = function () {
                $('#tableSubCountSelect').bootstrapTable('destroy')
                self.addsubcountnumber(2);
                $('#tableSubCountSelect').bootstrapTable('resetSearch');
                $('#tableSubCountSelect').bootstrapTable('removeAll');
                var link = "@Url.Action("AAA", "CCC")";
                link = link.replace("AAA", self.transubcountinfo.CrSubCountInfo.SubCount2Action());
                link = link.replace("CCC", self.transubcountinfo.CrSubCountInfo.SubCount2Controller());
                $('#tableSubCountSelect').bootstrapTable('refresh', { url: link });
                $('#tableSubCountSelect').bootstrapTable('destroy').bootstrapTable({
                    url: link,
                    queryParams: function (params) {
                        params.SubCount1ID = self.addsubcountid1();
                        params.name = $('#filtername').val();
                        return params;
                    }
                });
                $('#filtername').val('');
                $("#subcountselectWindow").modal('show');
            };
            self.selectsubcount3 = function () {
                $('#tableSubCountSelect').bootstrapTable('destroy')
                self.addsubcountnumber(3);
                console.log('show modal for select');
                $('#tableSubCountSelect').bootstrapTable('resetSearch');
                $('#tableSubCountSelect').bootstrapTable('removeAll');
                var link = "@Url.Action("AAA", "CCC")";
                link = link.replace("AAA", self.transubcountinfo.CrSubCountInfo.SubCount3Action());
                link = link.replace("CCC", self.transubcountinfo.CrSubCountInfo.SubCount3Controller());
                $('#tableSubCountSelect').bootstrapTable('refresh', { url: link });
                $('#tableSubCountSelect').bootstrapTable('destroy').bootstrapTable({
                    url: link,
                    queryParams: function (params) {
                        params.name = $('#filtername').val();
                        return params;
                    }
                });
                $('#filtername').val('');
                $("#subcountselectWindow").modal('show');
            };

            self.loaddata = function () {

                getajaxjson("@Url.Action("Get", "Inpayment", new { ID=ViewBag.ID, OrganizationsSettlementAccountID = ViewBag.OrganizationsSettlementAccountID, IsClone = ViewBag.IsClone})".replace(/&amp;/g, "&"), function (data) {
                    ko.mapping.fromJS(data, {}, self.inpayment);
                });
                getajaxjson("@Url.Action("GetItemOfExpenseList", "Helper")", function (data) {
                     ko.mapping.fromJS(data, self.itemofexpenselist);
                });
                 getajaxjson("@Url.Action("GetMoneyMeansMovementList2", "Helper")", function (data) {
                    ko.mapping.fromJS(data, self.moneymeansmovementlist);
                 });
                getajaxjson("@Url.Action("GetCurrency", "Helper")", function (data) {
                     ko.mapping.fromJS(data, self.currencylist);
                });
                getajaxjson("@Url.Action("GetAllowedTransactionInPaymentList", "Helper")" + "/?TableID=112&OrganizationsSettlementAccountID=" + self.inpayment.OrganizationsSettlementAccountID(), function (data) {
                    ko.mapping.fromJS(data, self.allowedtransactionlist);
                });
                self.contractorchange();
                self.allowedtransactionchange();                
                self.selectedsubacccrchange();
                self.coursechange();
                self.calculatetotal();
                if (!self.isfill())
                {
                    self.selectedmoneymeansmovementchange();
                }
            };
            ko.bindingHandlers.commaDecFor = {
                init: function (element, valueAccessor) {
                    var observable = valueAccessor();
                    var interceptor = ko.computed({
                        read: function () {
                            var value = observable();
                            return isNaN(value) || value === null || value === ''
                                ? 0
                                : value.toString().replace('.', ',');
                        },
                        write: function (newValue) {
                            if (typeof newValue === "string") {
                                newValue = newValue.replace(",", ".");
                            }
                            if (newValue !== observable()) {
                                observable(newValue);
                            }
                        }
                    });
                    if (element.tagName == 'INPUT')
                        ko.applyBindingsToNode(element, {
                            value: interceptor
                        });
                    else
                        ko.applyBindingsToNode(element, {
                            text: interceptor
                        });
                }
            };
            self.checkdata = function (isfilling) {
                if (!(self.showrequest() == true && self.inpayment.OrganizationState() === 1 && self.inpayment.OrganizationIsFullBudget() === true && self.inpayment.OrganizationsSettlementAccountOutOfBalance() === false && self.mmmkindid() === 1 && !(self.inpayment.OrganizationAccountCode().substring(0, 4) === "4004" || self.inpayment.OrganizationAccountCode().substring(0, 3) === "200" || self.inpayment.OrganizationAccountCode().substring(0, 3) === "300"))) {
                    self.inpayment.RequestReceivingCashID(null);
                }
                if (!isfilling) {
                    if (self.inpayment.Sum() === null || self.inpayment.Sum() === undefined || parseFloat(self.inpayment.Sum()) <= 0) {
                        alert("@SharedLocalizer["DocumentNotFilled"]");
                        return false;
                    }
                }
                if (!(/^\d+$/).test(self.inpayment.Number())) {
                    alert("@SharedLocalizer["NumberNotCorrect"]");
                    return false;
                }
                if (self.inpayment.Date() === null || self.inpayment.Date() === undefined || self.inpayment.Date() === 0) {
                    alert("@SharedLocalizer["DateNotSelected"]");
                    return false;
                }
                if (self.inpayment.AllowedTransactionID() === null || self.inpayment.AllowedTransactionID() === undefined || self.inpayment.AllowedTransactionID() === 0) {
                    alert("@SharedLocalizer["AllowedTransactionNotSelected"]");
                    return false;
                }
                if (self.inpayment.SubAccDbID() === null || self.inpayment.SubAccDbID() === undefined || self.inpayment.SubAccDbID() === 0) {
                    alert("@SharedLocalizer["SubAccDbNotSelected"]");
                    return false;
                }
                if (self.inpayment.SubAccCrID() === null || self.inpayment.SubAccCrID() === undefined || self.inpayment.SubAccCrID() === 0) {
                    alert("@SharedLocalizer["SubAccCrNotSelected"]");
                    return false;
                }
                if (self.inpayment.MoneyMeansMovementID() === null || self.inpayment.MoneyMeansMovementID() === undefined || self.inpayment.MoneyMeansMovementID() === 0) {
                    alert("@SharedLocalizer["MoneyMeansMovementNotSelected"]");
                    return false;
                }
                if (self.inpayment.PaymentDetails() === null || self.inpayment.PaymentDetails() === undefined || self.inpayment.PaymentDetails() === '' || self.inpayment.PaymentDetails() === 0) {
                    alert("@SharedLocalizer["PaymentDetailsNotSelected"]");
                    return false;
                }
                if (self.showrequest() && (self.inpayment.OrganizationState() === 1) && (self.inpayment.OrganizationIsFullBudget() === true) && (self.inpayment.OrganizationsSettlementAccountOutOfBalance() === false) && (self.creditaccid() !== 45) && (self.mmmkindid() === 1) && !(self.inpayment.OrganizationAccountCode().substring(0, 4) === "4004" || self.inpayment.OrganizationAccountCode().substring(0, 3) === "200" || self.inpayment.OrganizationAccountCode().substring(0, 3) === "300") && (self.inpayment.OrganizationAccountCode().length !== 20)) {
                    if (self.inpayment.RequestReceivingCashID() === null || self.inpayment.RequestReceivingCashID() === undefined || self.inpayment.RequestReceivingCashID() === '0' || self.inpayment.RequestReceivingCashID() === '' || !(/^\d+$/).test(self.inpayment.RequestReceivingCashID())) {
                        alert("@SharedLocalizer["RequestReceivingCashNotSelected"]");
                        return false;
                    }
                }
                //console.log(self.inpayment.Sum());
                //console.log("self.total() = " + self.total());
                //if (self.inpayment.Sum() !== self.total()) {
                //        alert("@SharedLocalizer["SumNotFilled"]");
                //        return false;
                //    }
                return true;
            };
            self.savedata = function () {
                if (!self.checkdata()) {
                    return;
                }
                var datatosave = JSON.stringify(ko.toJS(self.inpayment), null, 2)
                $.ajax({
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json; charset=utf-8",
                    },
                    type: "POST",
                    url: "@Url.Action("Update", "Inpayment", new {IsClone = ViewBag.IsClone})",
                    data: datatosave
                }).done(function (data, status, xhr) {
                    alert("@SharedLocalizer["SavedSuccessfully"]");
                    window.location.href = "@Url.Action("Index", "Inpayment")" + "/?OrganizationsSettlementAccountID=" + @ViewBag.OrganizationsSettlementAccountID + "&Startdate=" + '@ViewBag.Startdate' + "&Enddate=" + '@ViewBag.Enddate' + "&StartSum=" + '@ViewBag.StartSum' + "&EndSum=" + '@ViewBag.EndSum' + "&Status=" + '@ViewBag.Status' + "&Number=" + '@ViewBag.Number' + "&TreasDocID=" + '@ViewBag.TreasDocID' + "&PaymentDetails=" + '@ViewBag.PaymentDetails';
                })
                    .fail(function (xhr, status, error) {
                        alert(xhr.responseText);
                    });
            };
            ko.bindingHandlers.selectPicker = {
                after: ['options'],   /* KO 3.0 feature to ensure binding execution order */
                init: function (element, valueAccessor, allBindingsAccessor) {
                    var $element = $(element);
                    $element.addClass('selectpicker').selectpicker();

                    var doRefresh = function () {
                        $element.selectpicker('refresh');
                    }, subscriptions = [];
                    // KO 3 requires subscriptions instead of relying on this binding's update
                    // function firing when any other binding on the element is updated.

                    // Add them to a subscription array so we can remove them when KO
                    // tears down the element.  Otherwise you will have a resource leak.
                    var addSubscription = function (bindingKey) {
                        var targetObs = allBindingsAccessor.get(bindingKey);

                        if (targetObs && ko.isObservable(targetObs)) {
                            subscriptions.push(targetObs.subscribe(doRefresh));
                        }
                    };
                    addSubscription('options');
                    addSubscription('value');           // Single
                    addSubscription('selectedOptions'); // Multiple
                    ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                        while (subscriptions.length) {
                            subscriptions.pop().dispose();
                        }
                    });
                },
                update: function (element, valueAccessor, allBindingsAccessor) {
                }
            };
        }

        function getajaxjson(apiurl,handleData)
        {
            $.ajax({
                    headers: {
                        "Accept": "application/json",
                        "Content-Type": "application/json; charset=utf-8",
                    },
                    type: "GET",
                    async: false,
                    url: apiurl,
                }).done(function (data, status, xhr) {
                    handleData(data);
                    })
                    .fail(function (xhr, status, error)
                    {
                        alert(xhr.responseText);
                     });
        }

        $(document).ready(function () {
            $('#tableCONSelect').bootstrapTable({ height: 450 });
            $('#tableSubCountSelect').bootstrapTable({
                height: 450
            });
            $('#tableREQSelect').bootstrapTable({
                height: 450
            });
            function refreshdata2() {
                $('#tableCONSelect').bootstrapTable('refresh');
            }
            $('#refreshdata2').click(function () {
                refreshdata2();
            });
            function refreshdata3() {
                $('#tableREQSelect').bootstrapTable('refresh');
            }
            $('#refreshdata3').click(function () {
                refreshdata3();
            });

            $('#tableCONSelect').on('dblclick', function () {
                itemModel.inpayment.PayerName(selectedconrow.Name);
                itemModel.contractorchange();
                $("#conselectWindow").modal('hide');
            });
            $('#tableREQSelect').on('dblclick', function () {
                itemModel.inpayment.RequestReceivingCashID(selectedreqrow.ID);
                $("#reqselectWindow").modal('hide');
            });

            var itemModel = new ItemModel();
            itemModel.loaddata();
            ko.applyBindings(itemModel);
            selectedconrow = [];
            selectedreqrow = [];

            $("#tableCONSelect").on('click-row.bs.table', function (e, row, $element) {
                $('#tableCONSelect').find('.success').each(function () {
                    $(this).removeClass("success");
                });
                $($element).addClass('success');
                selectedconrow = row;
            });
            $("#tableREQSelect").on('click-row.bs.table', function (e, row, $element) {
                $('#tableREQSelect').find('.success').each(function () {
                    $(this).removeClass("success");
                });
                $($element).addClass('success');
                selectedreqrow = row;
            });
            $('#btnconselect').click(function () {
                itemModel.inpayment.PayerName(selectedconrow.Name);
                itemModel.contractorchange();
                $("#conselectWindow").modal('hide');
            });
            $('#btnreqselect').click(function () {
                itemModel.inpayment.RequestReceivingCashID(selectedreqrow.ID);
                $("#reqselectWindow").modal('hide');
            });
            $('#btnselectcon').click(function () {
                $('#tableCONSelect').bootstrapTable('resetSearch');
                $('#tableCONSelect').bootstrapTable('refresh', {
                    url: "@Url.Action("GetContractorSubCountList", "Helper")"
                });
                $("#conselectWindow").modal('show');
            });
            $('#btnselectreq').click(function () {
                $('#tableREQSelect').bootstrapTable('resetSearch');
                $('#tableREQSelect').bootstrapTable('refresh', {
                    url: "@Url.Action("GetRequestReceivingCashList", "Helper")" + "/?SettlementAccountID=" + itemModel.inpayment.OrganizationsSettlementAccountID()
                });
                $("#reqselectWindow").modal('show');
            });
            selectedsubcountrow = [];
            $('#tableSubCountSelect').bootstrapTable({ height: 500 });
            function refreshdata() {
                $('#tableSubCountSelect').bootstrapTable('refresh');
            }
            $('#refreshdata').click(function () {
                refreshdata();
            });
            var timerId;
            detal.onfocus = function () {

                var lastValue = detal.value;
                timerId = setInterval(function () {
                    if (detal.value != lastValue) {
                        showCount();
                        lastValue = detal.value;
                    }
                }, 20);
            };
            detal.onblur = function () {
                clearInterval(timerId);
            };
            function showCount() {
                result.innerHTML = detal.value.length;
            }
            function selectsubcount() {
                if (itemModel.addsubcountnumber() === 1) {
                    itemModel.addsubcountid1(selectedsubcountrow.ID);
                    itemModel.addsubcountname1(selectedsubcountrow.Name);
                }
                if (itemModel.addsubcountnumber() === 2) {
                    itemModel.addsubcountid2(selectedsubcountrow.ID);
                    itemModel.addsubcountname2(selectedsubcountrow.Name);
                }
                if (itemModel.addsubcountnumber() === 3) {
                    itemModel.addsubcountid3(selectedsubcountrow.ID);
                    itemModel.addsubcountname3(selectedsubcountrow.Name);
                }
                $("#subcountselectWindow").modal('hide');
                selectedsubcountrow = [];
            }
            $('#tableSubCountSelect').on('dblclick', function () {
                selectsubcount();
            });

            $("#tableSubCountSelect").on('click-row.bs.table', function (e, row, $element) {
                $('#tableSubCountSelect').find('.success').each(function () {
                    $(this).removeClass("success");
                });
                $($element).addClass('success');
                selectedsubcountrow = row;
            });
            $('#btnsubcountselect').click(function () {
                selectsubcount();
            });

            $('#subcountselectWindow').on('hidden.bs.modal', function () {
                $(this)
                    .find("input,textarea,select")
                    .val('')
                    .end()
                    .find("input[type=checkbox], input[type=radio]")
                    .prop("checked", "")
                    .end();
            })
            $(document).keypress(function (e) {
                if (e.which == 13) {
                    $("#refreshdata").click();
                    $('#refreshdata2').click();
                }
            });

        });
    </script>
}


